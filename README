#bootstrap & survivor strategy
config[outstanding_ping_questionable_threshold]

On DHT level have a count of questionable nodes and total nodes.

Have questionable flag on node that is set if node.outstanding_pings > config
and node.last_activity+config.node_timeout also DHT.questionable incremented.
When ping receive uncheck questionable decrement and decrement DHT.questionable
is node was questionable.

Have the same criteria for inserting new contact and that also determine if a
contact node is questionable in the awake function.

----
#Peer table clean-up
Have a timeout queue of peers order by there timeout time-stamp. Similar to node
the node timeout-queue.

----
#Token table
...

----


#Statistics
...

#bep42
bep42 assume ip is not nat and create confiming nodeid from that if it sees that
the ip is not correct regenerate nodeid from that external ip insert from old
RoutingTable in new
-----------------

check that peer owns nodeid before change anything
--------------

calculate latency by having a list of active transaction{id,time_sent} latency =
now - time_sent. To be used an deciding factor when inserting to a full not
expandable bucket. Or deciding on which X best Contact Nodes when returning
find_node/get_peers

----------
----------
----------
----------

sp_statistics
  -req/res in out
  -bytes sent/rec
  -per types

sp_blacklist[peer ip|node ip incoming&in routing table]

sp_blacklist[infohash in peer db]

-routing table calcluate size required
alloc upfront static in DHT
new DHT

ip vote

staticRoutingTree
staticReusableLists

